getwd()
devtools::use_testthat()
getwd()
devtools::use_testthat()
library(npExact)
getwd()
setwd(../..)
setwd("../..")
getwd()
setwd("..")
list.files()
getwd("npExact")
setwd("npExact")
list.files()
install.packages("npExact_0.2.tar.gz", type = "source")
library(npExact)
npMeanSingle(rep(1, 20), mu = .5)
a <- npMeanSingle(rep(1, 20), mu = .5)
str(a)
test()
devtools::test()
list.files()
setwd("npExact")
devtools::test()
devtools::test()
devtools::test()
npMeanSingle(rep(1, 20), mu = .5)
npMeanSingle(rep(1, 20), mu = .75)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .75)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .5)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .65)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .7)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .67)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .66)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .65)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .6)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .63)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .62)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .61)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .6)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .64)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .63)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .635)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .6375)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .637)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .635)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .6325)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .63)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .632)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .631)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .6305)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .6307)
npMeanSingle(c(rep(1, 20), rep(0, 4)), mu = .6307)
npMeanPaired(rep(1, 20), rep(0.5, 20))
dta
mean(dta)
mean(dta)
npMeanSingle(dta, mu = .6307)
npMeanSingle(dta, mu = .6)
npMeanSingle(dta, mu = .8)
npMeanSingle(dta, mu = .8)
npMeanSingle(dta, mu = .7)
npMeanSingle(dta, mu = .67)
npMeanSingle(dta, mu = .68)
npMeanSingle(dta, mu = .675)
str(a)
npMeanSingle(dta, mu = .675)
devtools::test()
getwd()
list.files()
devtools::test()
getwd()
devtools::test()
transBinomTest(x, p, x, n, 0.05)
x
p
transBinomTest(x, p, xp, n, 0.05)
xp
q
zeros
ones
res.binomtest
set.seed(1)
set.seed(1); p <- .3; transBinomTest(x, p, x - p, n, 0.03)
set.seed(1); p <- .5; transBinomTest(x, p, x - p, n, 0.03)
set.seed(1); p <- .7; transBinomTest(x, p, x - p, n, 0.03)
set.seed(1); p <- .6; transBinomTest(x, p, x - p, n, 0.03)
options(digits = 9)
set.seed(1); p <- .6; transBinomTest(x, p, x - p, n, 0.03)
devtools::test()
set.seed(1); p <- .6; transBinomTest(x, p, x - p, n, 0.03)
set.seed(1); p <- .5; transBinomTest(x, p, x - p, n, 0.03)
set.seed(1); p <- .3; transBinomTest(x, p, x - p, n, 0.03)
set.seed(1); p <- .2; transBinomTest(x, p, x - p, n, 0.03)
set.seed(1); p <- .1; transBinomTest(x, p, x - p, n, 0.03)
x
set.seed(1); p <- .15; transBinomTest(x, p, x - p, n, 0.03)
set.seed(1); p <- .175; transBinomTest(x, p, x - p, n, 0.03)
devtools::test()
devtools::test()
devtools::test()
q()
n
library(npExact)
npMeanSingle(runif(25), mu = .5)
updateCache <- TRUE
list.files()
updateCache
str(test)
test[, all(is.na(value))]
test[, all(is.na(value))]
View(test.wide)
writeSup(sup10, "UK", 2010)
sup10[, ESA := "ESA"]
writeSup(sup10, "UK", 2010)
str(sup10)
writeSup(sup10, "UK", 2010, "TOTDI")
ie2010
ie2010[induse == "OTTM", ]
ottmsum
ottmsum2011
ottmsum
ottmsum2010
ie2010[induse == "OTTM", ]
ie2010[induse == "OTTM", ]
str(ottmsum2010)
str(ottmsum2010[1])
str(c(ottmsum2010[1]))
c(ottmsum2010)
c(ottmsum2010)[1]
c(ottmsum2010)[[1]]
ottmsum2010[[1]]
ie2010[induse == "OTTM", ]
ie2010[induse == "OTTM", sum(value)]
str(sup10)
str(ie2010)
sup10[, ESA := NULL]
ie <- sup10[geo == "IE" & induse == "OTTM", ]
ie
ie <- sup10[geo == "IE" & time == 2010, induse == "OTTM", ]
ie
ie <- sup10[geo == "IE" & time == 2010 & induse == "OTTM", ]
ie
ie <- sup10[geo == "IE" & time == 2010 & induse == "OTTM",
  sum(value, na.rm = TRUE)]
ie
ie <- sup10[geo == "IE" & time == 2011 & induse == "OTTM",
  sum(value, na.rm = TRUE)]
ie
diff2010
diff2010[, unique(induse)]
dput(diff2010[, unique(induse)])
dput(sup10[, unique(induse)])
diff2010
diff2010
indsum
indsum[induse == "B", ]
indsum
indsum
writeSup(sup10, "UK", 2010, "TOTAL")
sup10[geo == "UK" & time == 2010 & induse %in% c("OTTM", "TS_BP",
  "TS_PP"), ]
dcast.data.table(sup10[geo == "UK" & time == 2010 & induse %in% c("OTTM", "TS_BP",
  "TS_PP"), ], stk.flow + prod.na + geo + time ~ induse)
str(test)
no
no
no
no
View(no)
no
nofactor
nofactor
nofactor
nofactor
nofactor
nofactor
nofactor
nofactor[, factor := NULL]
nofactor[, TOTAL := NULL]
nofactor[, prod := NULL]
str(nofactor)
str(no)
str(nosum)
str(nodiff)
nofactor
str(nofactor)
str(nosum)
nofactor[, unique(induse)]
nosum[, unique(induse)]
nofactor
str(no2010)
str(no2011)
ottmsum2010
ottmsum2011
no2010[induse == "OTTM", ]
no2010[induse == "OTTM", ]
no2010[induse == "OTTM", sum(value)]
test
test
no2010
no2011
test[, all(is.na(value))]
se2010
test
View(test.wide)
test
test
test
test
test
View(sumOTTM)
q()
n
q()
n
)
library(npE)
library(npE@
)
library(npExact)
ones <- rep(1, 20)
zeros <- rep(0, 20)
npMeanPaired(ones, zeros)
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(ones, zeros, alternative = "two.sided")
library(devtolls)
library(devtools)
load_all()
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(ones, zeros, alternative = "two.sided")
npMeanPaired(zeros, ones, alternative = "two.sided")
npMeanPaired(zeros, ones, alternative = "less")
x <- runif(20)
y <- runif(20)
npMeanPaired(x, y, alternative = "two.sided")
y <- runif(20, min = 0.5)
npMeanPaired(x, y, alternative = "two.sided")
npMeanPaired(x * 0.8, y, alternative = "two.sided")
npMeanUnpaired(x * 0.8, y, alternative = "two.sided")
npMeanUnpaired(x, y, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.1)
npVarianceSingle(runif(50), v = 0.1, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.1, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.01, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.015, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.015, alternative = "two.sided",
alpha = 0.1)
npVarianceSingle(runif(50), v = 0.015, alternative = "two.sided",
alpha = 0.2)
npVarianceSingle(runif(50), v = 0.1, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.2, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.2, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.2, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.2, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.1, alternative = "two.sided")
npVarianceSingle(runif(50), v = 0.05, alternative = "two.sided")
npVarianceSingle(runif(50) * 2, upper = 2, v = 0.05, alternative = "two.sided")
npVarianceSingle(runif(50) * 2, upper = 2, v = 0.1, alternative = "two.sided")
npVarianceSingle(runif(50) * 2, upper = 2, v = 0.1, alternative =
"two.sided", alpha = 0.1)
npVarianceSingle(runif(50, max = 4), upper = 3, v = 0.1, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = 0.1, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = 0.3, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = 0.3, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = 0.7, alternative = "two.sided")
x <- runif(50, max = 4)
x
var(x)
npVarianceSingle(runif(50, max = 4), upper = 4, v = 1, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = .9, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = .99, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = .97, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = .95, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = .93, alternative = "two.sided")
npVarianceSingle(runif(50, max = 4), upper = 4, v = .91, alternative = "two.sided")
mean(replicate(1000, var(runif(50, max = 4))))
runif(100)
sum(runif(100))
x <- replicate(10000, sum(runif(100)))
head(x)
str(x)
hist(replicate(10000, sum(runif(100))))
npVarianceSingle(runif(50, max = 6), upper = 6, v = 1.91, alternative = "two.sided")
npVarianceSingle(runif(50, max = 6), upper = 6, v = 2.91, alternative = "two.sided")
npVarianceSingle(runif(50, max = 6), upper = 6, v = 2.4, alternative = "two.sided")
npVarianceSingle(runif(50, max = 6), upper = 6, v = 2.4, alternative = "two.sided")
npVarianceSingle(runif(50, max = 6), upper = 6, v = 2.4, alternative = "two.sided")
npVarianceSingle(runif(50, max = 6), upper = 6, v = 2.4, alternative = "two.sided")
npVarianceSingle(runif(50, max = 6), upper = 6, v = 2, alternative = "two.sided")
npMeanSingle(runif(40), mu = .3)
npMeanSingle(runif(40), mu = .6)
npMeanSingle(runif(40), mu = .6, alternative = "two.sided")
npMeanSingle(runif(40), mu = .8, alternative = "two.sided")
npMeanSingle(runif(40), mu = .8, alternative = "two.sided")
npMeanSingle(runif(40), mu = .8, alternative = "two.sided")
npMeanSingle(runif(40), mu = .2, alternative = "two.sided")
npMeanSingle(runif(40), mu = .52, alternative = "two.sided")
npMeanSingle(runif(40), mu = .52, alternative = "two.sided")
npMeanUnpaired(x, y, alternative = "two.sided")
npMeanUnpaired(zeros, ones, alternative = "two.sided")
npMeanUnpaired(ones, zeros, alternative = "two.sided")
npMeanUnpaired(runif(20), runif(20), alternative = "two.sided")
npStochinUnpaired(ones, zeros)
npStochinUnpaired(ones, zeros)
npStochinUnpaired(ones, zeros)
npStochinUnpaired(ones, zeros, alternative = "two.sided")
npStochinUnpaired(ones, zeros, alternative = "two.sided")
npStochinUnpaired(ones, zeros, alternative = "two.sided")
npStochinUnpaired(zeros, ones, alternative = "two.sided")
npStochinUnpaired(zeros, ones)
npStochinUnpaired(zeros, ones, alternative = "less")
q()
n
library(devtools)
load_all()
ones <- rep(1, 20)
zeros <- rep(0, 20)
npMeanPaired(zeros, ones)
npMeanPaired(zeros, ones, alternative = "greater")
npMeanPaired(zeros, ones, alternative = "greater")
npMeanPaired(zeros, ones)
x <- runif(30)
y <- runif(30)
npMeanPaired(x, y)
npMeanPaired(x, y, alternative = "greater")
npMeanPaired(x, y, alternative = "greater")
q()
n
load_all()
x1 <- runif(20)
x2 <- runif(20)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2, alternative = "greater")
npStochinUnpaired(x1 + 1, x2, alternative = "greater")
npStochinUnpaired(x1 + 1, x2)
npStochinUnpaired(x1 + 1, x2)
npStochinUnpaired(x1 + 1, x2, alternative = "less")
npStochinUnpaired(x1 - 1, x2)
rt
npStochinUnpaired(x1 + 1, x2, alternative = "less")
q()
n
load_all()
ls()
x1 <- rnorm(20)
x2 <- rnorm(20)
npStochinUnpaired(x1, x2)
npStochinUnpaired.karl(x1, x2)
npStochinUnpaired(x1, x2, alternative = "greater")
npStochinUnpaired.karl(x1, x2, alternative = "greater")
npStochinUnpaired(x1, x2, alternative = "less")
npStochinUnpaired.karl(x1, x2, alternative = "less")
y1 <- runif(20)
y2 <- runif(20)
npMeanPaired(y1, y2)
npMeanPaired(y1, y2, alternative = "less")
npStochinUnpaired.karl(x1, x2, alternative = "less")
npStochinUnpaired(x1, x2, alternative = "less")
npStochinUnpaired.karl(x1 - 1, x2, alternative = "less")
x1 <- x1 - 1
npStochinUnpaired(x1, x2, alternative = "less")
npStochinUnpaired.karl(x1, x2, alternative = "less")
mean(x1)
mean(x2)
?oneway.test
library(car)
install.packages(car)
install.packages("car")
install.packages("pbkrtest")
getwd()
list.files()
airfares
str(airfares)
q()
c
q()
n
load_all()
load_all()
load_all()
npStochinUnpaired(x1, x2 + 5, d = .66)
npStochinUnpaired(x1, x2 + 5, d = .67)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .67)
npStochinUnpaired(x1, x2 + 5, d = .66)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .66)
npStochinUnpaired(x1, x2 + 5, d = .68)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .68)
x <- list()
is.numeric(x)
npStochinUnpaired(x1, x2 + 5, d = .6)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .6)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .6)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .6)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .6)
npStochinUnpaired(x1, x2 + 5, d = .68)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .68)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .68)
debug(npStochinUnpaired)
npStochinUnpaired(x1, x2 + 5, d = .68)
ls()
debug(minTypeIIError)
npStochinUnpaired(x1, x2 + 5, d = .68)
npStochinUnpaired(x1, x2 + 5, d = .68)
q()
undebug(minTypeIIError)
undebug(npStochinUnpaired)
npStochinUnpaired(x1, x2 + 5, d = .68)
load_all()
npStochinUnpaired(x1, x2 + 5, d = .68)
ls()
p
p.al
p.alt
theta
str(theta)
f
npStochinUnpaired(x1, x2 + 5, d = .68)
ls()
mintypeII
str(mintypeII)
str(N)
str(f)
str(typeIIerrors)
str(theta)
theta[2, ]
f
npStochinUnpaired(x1, x2 + 5, d = .6)
ls()
str(theta)
theta[, 2]
theta[2, ]
theta
f
f
q()
exit
ue
f
q()
f
f()
ls()
?browser
q
q()
npStochinUnpaired(x1, x2 + 5, d = .1)
ls()
theta
theta[2]
theta[2, ]
mintypeII
righttheta
typeIIerrors
theta
typeIIerrors
q()
n
npStochinUnpaired(x1, x2 + 5, d = .7)
ls()
theta
str(theta)
typeIIerrors
npStochinUnpaired(x1, x2 + 5, d = .7)
ls()
q
load_all()
npStochinUnpaired(x1, x2 + 5, d = .7)
ls()
theta
typeIIerrors
empty(theta)
is.empty(theta)
str(theta)
theta[2, ]
is.null(theta[2, ])
length(theta[2, ])
load_all()
npStochinUnpaired(x1, x2 + 5, d = .7)
npStochinUnpaired(x1, x2 + 5, d = .6)
npStochinUnpaired(x1, x2 + 5, d = .5)
npStochinUnpaired(x1, x2 + 5, d = .4)
npStochinUnpaired(x1, x2 + 5, d = .3)
npStochinUnpaired(x1, x2 + 5, d = .5)
npStochinUnpaired(x1, x2 + 5, d = .55)
npStochinUnpaired(x1, x2 + 5, d = .6)
npStochinUnpaired(x1, x2 + 5, d = .6)
npStochinUnpaired(x1, x2 + 4, d = .6)
npStochinUnpaired(x1, x2 + 4, d = -.6)
npStochinUnpaired(x1, x2 + 4, d = -.7)
npStochinUnpaired(x1, x2 + 4, d = -.8)
npStochinUnpaired(x1, x2 + 4, d = -.9)
npStochinUnpaired(x1, x2 + 4, d = -1)
)
load_all()
library(profr)
?profr
library(testthat)
res
npStochinUnpaired(high, low, d = 0.8, alt = "greater")
npStochinUnpaired(high, low, d = 0.7, alt = "greater")
npStochinUnpaired(high, low, d = 0.65, alt = "greater")
npStochinUnpaired(high, low, d = 0.67, alt = "greater")
npStochinUnpaired(high, low, d = 0.68, alt = "greater")
npStochinUnpaired(high, low, d = 0.69, alt = "greater")
npStochinUnpaired(high, low, d = 0.67, alt = "greater")
str(res)
str(df)
df
plot(df)
plot(df, type = "l")
npStochinUnpaired(high, low, d = 0.9, alt = "greater")
npStochinUnpaired(high, low, d = 0.85, alt = "greater")
df
library(gglot2)
library(ggplot2)
str(df)
str(df)
str(df1)
res
res
npStochinUnpaired(high, low, d = 0.5, alt = "greater")
npStochinUnpaired(high, low, d = 0.5, alt = "greater")
res
str(res)
res <- npStochinUnpaired(high, low)
str(res)
res$mc.error
res <- npStochinUnpaired(high, low, d = .67, alternative = "greater")
str(res)
res
res
install.packages("Rd2roxygen")
library(Rd2roxygen)
getwd()
setwd("..")
getwd()
list.files()
options(roxygen.comment = "##' ")
Rd2roxygen("npExact")
setwd("..")
Rd2roxygen("npExact")
q)()
q()
n
load_all()
x1 <- rnorm(1)
x2 <- rnorm(1)
npStochinUnpaired(x1, x2)
alpha <- 0.05
d <- 0
alternative = "greater"
epsilon <- 10^(-6)
str(res)
npStochinUnpaired(x1, x2)
example(tryCatch)
demo(error.catching)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
str(res)
optimaltypeII
npStochinUnpaired(x1, x2)
res
inherits(res, "try-error")
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
y1 <- rnorm(30)
y2 <- rnorm(30) + 2
npStochinUnpaired(y1, y2)
npStochinUnpaired(y2, y1)
npStochinUnpaired(y1, y2)
mean(y1)
mean(y2)
npStochinUnpaired(y1, y2)
npStochinUnpaired(y2, y1)
npStochinUnpaired(y1, y2 - 4)
npStochinUnpaired(y1, y1)
npStochinUnpaired(y1, y1 - 1)
npStochinUnpaired(y1, y1 + 1)
npStochinUnpaired(y1 - 1, y1)
npStochinUnpaired(y1 + 1, y1)
npStochinUnpaired(y1 + 1, y1, d = .9)
npStochinUnpaired(y1 + 1, y1, d = .8)
npStochinUnpaired(y1 + 1, y1, d = .7)
npStochinUnpaired(x1, x2)
x1 <- runif(30)
x2 <- runif(30)
npMeanUnpaired(x1, x2)
npMeanUnpaired(x1[1], x2[1])
npMeanUnpaired(x1[1], x2[1])
npMeanUnpaired(x1[1:2], x2[1:2])
npMeanUnpaired(x1[1:4], x2[1:4])
npMeanUnpaired(x1[1:4], x2[1:4])
npMeanUnpaired(x1[1:2], x2[1:2])
npMeanUnpaired(x1[1:2], x2[1:2])
npMeanUnpaired(x1[1:2], x2[1:2])
npMeanUnpaired(x1[1:2], x2[1:2])
npMeanUnpaired(x1[1:2], x2[1:2])
npMeanUnpaired(x1[1:2], x2[1:2])
npMeanUnpaired(x1[1:2], x2[1:2])
npMeanUnpaired(x1[1:3], x2[1:3])
npMeanUnpaired(x1[1:4], x2[1:4])
npMeanUnpaired(x1, x2)
npMeanUnpaired(x1[1:7], x2[1:7])
npMeanUnpaired(x1[1:4], x2[1:4])
npMeanUnpaired(x1[1:4], x2[1:4])
npMeanUnpaired(x1[1:3], x2[1:3])
npMeanUnpaired(x1[1:3], x2[1:3])
npMeanUnpaired(x1[1:3], x2[1:3])
npMeanUnpaired(x1[1:3], x2[1:3])
npMeanUnpaired(x1[1:3], x2[1:3])
theta
optimaltypeII
theta
x1 <- x1[1:3]
x2 <- x2[1:3]
theta
theta$theta >= 1
options(digits = 9)
theta
round(theta$theta, 4)
round(theta$theta, 3)
npMeanUnpaired(x1[1:3], x2[1:3])
npMeanUnpaired(x1[1:3], x2[1:3])
npMeanUnpaired(x1[1:4], x2[1:4])
x1
x2
npMeanUnpaired(runif(4), runif(4))
npMeanUnpaired(runif(3), runif(3))
npMeanUnpaired(runif(3), runif(3))
npMeanUnpaired(runif(3), runif(3), alternative = "greater")
npMeanUnpaired(runif(4), runif(4), alternative = "greater")
npStochinUnpaired(x1, x2)
set.seed(123)
x1 <- rnorm(20)
x2 <- rnorm(20)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2, d = .4)
npStochinUnpaired(x1, x2, d = .7)
npStochinUnpaired(x1, x2, d = .6)
npStochinUnpaired(x1, x2, d = .6, alternative = "less")
npStochinUnpaired(x1, x2 - 1, d = .6, alternative = "less")
npStochinUnpaired(x1, x2 + 1, d = .6, alternative = "less")
npStochinUnpaired(x1, x2 + 1, d = -.6, alternative = "less")
npStochinUnpaired(x1, x2 + 1, d = -.6, alternative = "greater")
npStochinUnpaired(x1, x2 + 1, d = .6, alternative = "greater")
npStochinUnpaired(x1, x2 + 1, d = -.8, alternative = "greater")
npStochinUnpaired(x1, x2 + 1, d = -.7, alternative = "greater")
npStochinUnpaired(x1, x2 + 1, d = -.75, alternative = "greater")
npStochinUnpaired(x2, x1 + 1, d = -.75, alternative = "greater")
npStochinUnpaired(x2, x1 + 1, d = -.8, alternative = "greater")
npStochinUnpaired(x2, x1 + 1, d = -.85, alternative = "greater")
npStochinUnpaired(x2, x1 + 1, d = -.85, alternative = "less")
npStochinUnpaired(x2, x1 + 1, d = .6, alternative = "less")
npStochinUnpaired(x2, x1 - 1, d = .6, alternative = "less")
npStochinUnpaired(x2, x1 - 1, d = .8, alternative = "less")
npStochinUnpaired(x2, x1 - 1, d = .7, alternative = "less")
npStochinUnpaired(x2, x1 - 1, d = -.7, alternative = "less")
set.seed(123)
high <- rnorm(30)
low <- rnorm(30) - .15
low <- rnorm(30) - 1.5
npStochinUnpaired(high, low)
npStochinUnpaired(low, high)
npStochinUnpaired(high, low, alternative = "greater")
npStochinUnpaired(low, high, alternative = "less")
npStochinUnpaired(high, low, alternative = "greater", d = .3)
npStochinUnpaired(high, low, alternative = "greater", d = .5)
npStochinUnpaired(high, low, alternative = "greater", d = .45)
npStochinUnpaired(high, low, alternative = "greater", d = .475)
npStochinUnpaired(high, low, alternative = "greater", d = .47)
npStochinUnpaired(high, low, alternative = "greater", d = .46)
npStochinUnpaired(high, low, alternative = "greater", d = .45)
npStochinUnpaired(high, low, alternative = "greater", d = .44)
getwd()
setwd("..")
list.files()
setwd("..")
list.files()
install.packages("npExact_0.2.tar.gz")
library(npExact)
q()
n
library(npExact)
options()
list.files()
getwdn
getwd()
setwd("../..")
list.files()
install.packages("npExact_0.2.tar.gz")
library(npExact)
npStochinUnpaired(x1, x2)
npStochinUnpaired(rnorm(30), rnorm(30))
getwd()
list.files()
civil <- read.table("civil law.dat")
str(civil)
str(as.matrix(civil))
str(as.vector(as.matrix(civil)))
as.vector(civil)
str(as.vector(civil))
npStochinUnpaired(rnorm(30), rnorm(30))
x1 <- rnorm(30)
x2 <- rnorm(30)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
load_all()
2
list.files()
load_all()
npStochinUnpaired(x1, x2)
npStochinUnpaired(x1, x2)
npStochinUnpaired(low, high, d = -.6, alpha = 0.1)
npStochinUnpaired(low, high, d = -.6, alpha = 0.1)
npStochinUnpaired(low, high, d = -.6)
npStochinUnpaired(low, high, d = -.7)
npStochinUnpaired(low, high, d = -.8)
npStochinUnpaired(low, high, d = .8)
npStochinUnpaired(low, high, d = .7)
npStochinUnpaired(low, high, d = .7, alternative = "less")
npStochinUnpaired(low, high, d = .7, alternative = "less")
npStochinUnpaired(low, high, d = .7, alternative = "less")
npStochinUnpaired(low, high, d = -.7, alternative = "less")
npStochinUnpaired(low, high, d = -.4, alternative = "less")
npStochinUnpaired(low, high, d = -.7, alternative = "less")
npStochinUnpaired(low, high, d = 0, alternative = "less")
npStochinUnpaired(low, high, d = 0.1, alternative = "less")
npStochinUnpaired(low, high, d = 0.7, alternative = "less")
npStochinUnpaired(low, high, d = 0.7, alternative = "less")
npStochinUnpaired(low, high, d = 0.7, alternative = "less")
npStochinUnpaired(low, high, d = 0.7, alternative = "less")
npStochinUnpaired(low, high, d = 0, alternative = "less")
npStochinUnpaired(low, high, d = -0.4, alternative = "less")
npStochinUnpaired(low, high, d = -0.5, alternative = "less")
npStochinUnpaired(low, high, d = -0.5)
npStochinUnpaired(low, high, d = 0)
npStochinUnpaired(low, high, d = 0.7)
npStochinUnpaired(high, low, d = 0.7)
npStochinUnpaired(high, low, d = 0.4)
npStochinUnpaired(high, low, d = 0.4)
npStochinUnpaired(high, low, d = 0.4)
npStochinUnpaired(high, low, d = 0.5)
npStochinUnpaired(high, low, d = 0.45)
npStochinUnpaired(high, low, d = 0.46)
npStochinUnpaired(high, low, d = 0.47)
npStochinUnpaired(high, low, d = 0.475)
npStochinUnpaired(high, low, d = 0.48)
str(x1)
x1 <- as.data.frame(x1)
x1
str(x1)
x2
str(x2)
x2 <- as.data.frame(x2)
x2
str(x2)
alternative <- "greater"
null.hypothesis
str(x1)
is.data.frame(x1)
y1
y1 <- runif(30)
is.data.frame(y1)
dim(x1)
dim(x1)[2]
str(x1)
x1 <- as.data.frame(rnorm(30))
str(x1)
null.hypothesis
x1 <- runif(20)
x2 <- runif(20)
npMeanPaired(x1, x2)
dim(x1)
length(x1)
npMeanPaired(x1, x2)
npMeanPaired(x1, x2)
npMeanPaired(as.data.frame(x1), x2)
x1 <- as.data.frame(x1)
npMeanPaired(as.data.frame(x1), x2)
npMeanPaired(x1, x2)
x2 <- as.matrix(x2)
npMeanPaired(x1, x2)
str(x1)
str(x2)
npMeanSingle(runif(30), mu = .3)
npMeanSingle(runif(3), mu = .3)
npMeanSingle(runif(3), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "greater")
npMeanSingle(runif(2), mu = .3, alternative = "less")
npMeanSingle(runif(2), mu = .3)
npMeanSingle(runif(2), mu = .3)
npMeanSingle(runif(2), mu = .3)
npMeanPaired(runif(30), runif(30))
npMeanPaired(runif(3), runif(3))
npMeanPaired(runif(3), runif(3))
npMeanPaired(runif(30), runif(30))
npMeanUnpaired(runif(30), runif(30))
npMeanUnpaired(runif(3), runif(3))
npMeanUnpaired(runif(3), runif(3), alternative = "greater")
npStochinUnpaired(runif(3), runif(3), alternative = "greater")
npStochinUnpaired(runif(3), runif(3), alternative = "greater")
npStochinUnpaired(runif(3), runif(3), alternative = "greater")
npStochinUnpaired(runif(3), runif(3), alternative = "greater")
npStochinUnpaired(runif(3), runif(3), alternative = "less")
npStochinUnpaired(runif(3), runif(3))
npVarianceSingle(runif(30), v = .1)
npVarianceSingle(runif(30), v = .1, alternative = "less")
npVarianceSingle(runif(30), v = .01)
npVarianceSingle(runif(30), v = .01, alternative = "greater")
npVarianceSingle(runif(30), v = .01, alternative = "less")
npVarianceSingle(runif(30), v = .01)
npVarianceSingle(runif(30), v = .1)
str(res)
library(testthat)
str(res)
res
str(res)
res
res
res
q()
n
load_all()
load_all()
mean(x)
apply
ls()
z <- runif(60)
var(z)
load_all()
library(testhat)
library(testthat)
q()
n
load_all()
ls()
load_all()
load_all()
q()
n
library(testthat)
res
res
res
res
str(res)
npMeanSingle(x, mu = 0.3)
ls()
max(NULL, NULL)
npMeanSingle(x, mu = 0.3)
npMeanSingle(x, mu = 0.3, alternative = "greater")
res
document()
q()
n
)
load_all()
ls()
env()
summary(x)
var(x)
10/36
summary(x)
x
summary(x)
summary(x)
summary(x)
summary(x)
library(testthat)
summary(x)
var(x)
sd(x)
var(x)
summary(x)
var(x)
sd(x)
vseq <- .7
vseq <- .07
vseq <- .03
vseq <- .11
res
res
res <- npVarianceSingle(x, v = .2, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .22, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .23, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .24, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .24, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .24, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .24, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .23, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .23, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .23, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .23, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .23, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .23, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .23, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .25, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .26, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .25, alternative = "less", alpha = 0.025)
npVarianceSingle(x, v = .01, alternative = "greater", alpha = 0.025)
npVarianceSingle(x, v = .02, alternative = "greater", alpha = 0.025)
npVarianceSingle(x, v = .03, alternative = "greater", alpha = 0.025)
npVarianceSingle(x, v = .04, alternative = "greater", alpha = 0.025)
npVarianceSingle(x, v = .04, alternative = "greater", alpha = 0.025)
npVarianceSingle(x, v = .04, alternative = "greater", alpha = 0.025)
res
theta.1
str(res)
var(x)
res
res
res
str(a)
a
uaiunade)
examples(tryCatch)
example(tryCatch)
load_all()
load_all()
warnings()
npStochinUnpaired(x1, x2, d = 0.5, alternative = "less", alpha = 0.025)
a <- npStochinUnpaired(x1, x2, d = 0.5, alternative = "less", alpha = 0.025)
str(a)
load_all()
load_all()
mean(x1)
mean(x2)
load_all()
.Machine$double.eps
.Machine$double.eps^.25
.Machine$double.eps^.5
.Machine$double.eps^.1
.Machine$double.eps^.01
.Machine$double.eps^.15
.Machine$double.eps^.125
load_all()
load_all()
str(a)
str(b)
str(a)
b
str(b)
b
q()
n
load_all()
?pbinom
?complete.cases
?optimize
?var
?uniroot
test()
x
theta.1
str(res)
res
res
str(res)
res$d.alternative
length(res$d.alternative)
str(res)
test()
q()
n
