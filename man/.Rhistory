q()
n
getwd()
setwd("../data")
list.files()
load("bargaining.RData")
ls
str(bargaining)
bargaining
list.files()
load("pain.RData")
ls()
pain
pain2 <- pain
pain <- matrix(rbind(pain[,1:2]), pain[, 3:4])
str(pain)
pain <- as.matrix(pain)
pain
pain <- matrix(rbind(pain[,1:2]), pain[, 3:4])
pain1 <- matrix(rbind(pain[,1:2]), pain[, 3:4])
pain[,1]
pain[,1:2]
load("pain.RData")
pain
str(pain)
library(reshape)
a <- melt(pain)
a
str(a)
a$pc <- c(rep(1, 50), rep(0, 50))
a
head(a)
a$before <- c(rep(1, 25), rep(0, 25))
a
b <- cast(a, value ~ pc + before)
b
str(a)
b <- cast(a, pc + before ~ value)
b
a
b <- cast(a, value ~ pc)
a <- a[, -1]
a
b <- cast(a, value ~ pc)
b
b <- cast(a, value ~ pc + before)
a
pain
a <- as.matrix(pain)
names(a) <- NULL
a
colnames(a)
colnames(a) <- NULL
a
b <- rbind(a[,1:2], a[,3:4])
b
b$pc <- c(rep(1, 25), rep(0, 25))
b
b <- rbind(a[,1:2], a[,3:4])
str(b)
b
rownames(b)
rownames(b) <- NULL
b
b$pc <- c(rep(1, 25), rep(0, 25))
b <- rbind(a[,1:2], a[,3:4])
rownames(b) <- NULL
colnames(b) <- NULL
b
b <- cbind(b, c(rep(1, 25), rep(0, 25)))
b
b <- as.data.frame(b)
b
colnames(b) <- c("before", "after", "pc")
str(b)
head(b)
tail(b)
pain <- b
str(pain)
save(pain, file = "pain.RData")
list.files
list.files()
load("civil_common_law.RData")
load("uncertainty.RData")
load("french_vs_rest.RData")
uncertainty
ls()
common
civil
length(common)
length(civil)
french
colnames(french) <- c("french.origin", "rest" )
french
mshscores <- as.data.frame(civil, common)
civil
str(civil)
mshscores <- data.frame(civil, common)
mshscores <- data.frame(civil, c(common, NA))
mshscores <- data.frame(civil, c(common, rep(NA, 30)))
mshscores
colnames(mshscores) <- c("civil", "common")
mshscores
str(mshscores)
ls()
save(mshscores, file = "mshscores.RData")
getwd()
list.files()
ls()
rm(list = ls())
x1 <- rnorm(20)
x2 <- rnorm(20) + .2
npStochin(x1, x2, iter = 500)
npStochin(x1, x2, iter = 500)
npStochin(x1, x2, iter = 500)
npStochin(x1, x2, iter = 500)
npStochin(x1, x2, iter = 500)
npStochin(x1, x2, iter = 500)
npStochin(x1, x2, iter = 500)
npStochin(x1, x2, iter = 500)
q()
n
q()
n
